initialize() {
    initializeMutationRate(0);
    initializeRecombinationRate(recombination_rate);
    initializeTreeSeq();
    
    // Mutation type for bottleneck
    initializeMutationType("m1", 0.5, "f", 0.0);
    
    // Mutation type for selection
    initializeMutationType("m2", dominance_coeffecient, "f", selection_coeffecient);
    
    // Genomic element representing the chromosome
    initializeGenomicElementType("g1", m1, 1.0);
    // Uniform chromosome of length 100 kb with uniform recombination
    initializeGenomicElement(g1, 0, sequence_length);
}

1 early() {
    defineConstant("simID", getSeed());
    // Create a population of n individuals
    sim.addSubpop("p1", population_size);
}

1 late() {
    // Add mutation m2 at a fixed location (e.g., middle of the chromosome)
    sim.treeSeqOutput( "temp/slim/"+ "slim_" + simID + ".txt");
    target = sample(p1.genomes, 1);
    target.addNewDrawnMutation(m2, random_location);
}

2:sg1 late() {
    if (sim.countOfMutationsOfType(m2) == 0) {
        fixed = (sum(sim.substitutions.mutationType == m2) == 1);
        if (fixed) {
            cat(simID + ": FIXED\n");
            cat(community.tick);
        } 
        else {
            cat(simID + ": LOST - RESTARTING\n");
            // Go back to generation 1 and restart
            sim.readFromPopulationFile("temp/slim/" + "slim_" + simID + ".txt");
            setSeed(rdunif(1, 0, asInteger(2^62) - 1));
            simID1 = getSeed();
            cat(simID1);
            community.tick = 1;
            // Re-introduce the mutation
            target = sample(p1.genomes, 1);
            target.addNewDrawnMutation(m2, random_location);
        }
    }
}

stop_generation late() {
    // Output TreeSeq data
    sim.treeSeqOutput(paste0("output/output_selection/selection_trees/selection_", selection_coeffecient, ".trees"));
    sim.simulationFinished();
}